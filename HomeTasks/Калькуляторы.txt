ООП, Калькулятор:
1. Создать класс CalculatorWithOperator, все методы в данном классе НЕ статические. В классе CalculatorWithOperator должны присутствовать
	1.1 4 метода (деления, умножение, вычитание, сложение) каждый из этих методов должен принимать два параметра (определитесь с их типами) и должны возвращать результать (определиться с возвращаемым типом результата) при помощи ключевого слово return. 
	1.2 Также должно быть ещё 2-3 метода (Возведение в степень дробного положительного числа в целую степень, Модуль числа, Корень из числа**). В методах можно использовать оператор + / * -. Использование библиотеки Math ЗАПРЕЩЕНО!.
2. В отдельном классе, создать мэйн метод. Внутри данного метода создать экземпляр класса CalculatorWithOperator сохранив его в переменную. При помощи методов созданного объекта вычислить результат выражения 4.1 + 15 * 7 + (28 / 5) ^ 2. Результат записать в переменную (определить самый подходящий тип переменной). Вывести сохранённый результат в консоль. Внимание, знак "^" обозначает возведение в степень
	2.1 Далее сохранённый результат попробовать поделить на 0 (если возникнет ошибка закомментировать и прокоментировать почему)
	2.2 Далее сохранённый результат попробовать поделить на 0.0d  (если возникнет ошибка закомментировать и прокоментировать почему)
3. Создать класс CalculatorWithMathCopy (скопировать базовые математические операции из CalculatorWithOperator) и CalculatorWithMathExtends (унаследовать базовые математические операции из CalculatorWithOperator). Изучить библиотеку (класс) Math из jdk. (https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html)
4. В классе CalculatorWithMathCopy должны присутствовать 4 метода (деления, умножение, вычитание, сложение) данные методы можно скопировать из класса CalculatorWithOperator. В методах (Возведение в степень, Модуль числа, Корень из числа) можно использовать только вызовы  методов библиотеки Math, все методы в данном классе НЕ статические
5. Повторить пункты 1 и 2 с классом CalculatorWithMathCopy
6. В классе CalculatorWithMathExtends должны присутствовать 4 метода (деления, умножение, вычитание, сложение) данные методы нужно наследовать из класса CalculatorWithOperator. В методах (Возведение в степень, Модуль числа, Корень из числа) требуется переопределить и можно использовать только вызовы  методов библиотеки Math, все методы в данном классе НЕ статические
7. Повторить пункты 1 и 2 с классом CalculatorWithMathExtends
Задание посложнее. Для того чтобы преступить к данному заданию необходимо выполнить все предыдущие.
8*. Создать класс CalculatorWithCounter, все методы в данном классе НЕ статические. У данного класса должно быть три конструктора (или один если сможете, это ещё не изучено https://refactoring.guru/ru/design-patterns/decorator) один принимающий в себя CalculatorWithOperator, второй CalculatorWithMathCopy, третий CalculatorWithMathExtends. Данные конструкторы должны сохранять переданные калькуляторы в приватные поля класса для дальнейшего их использования. Он также имеет 7 методов как и другие калькуляторы + 1 метод getCountOperation() который должен вернуть значение внутреннего счётчика. 
В реализации методов должен быть вызван один из объектов переданный в констуктор при создании объекта CalculatorWithCounter, и вызвать соответсвующий метод у них. К примеру. Если вызывают метод plus у CalculatorWithCounter то он должен вызвать метод plus у объекта CalculatorWithOperator или у объекта CalculatorWithMathCopy или у объекта  CalculatorWithMathExtends (смотря что передали в конструктор) и увеличить значение внутреннего счётчика операций.
9*. Повторить пункты 1 и 2 с классом CalculatorWithCounter (помним что у нас нет дефолтного констуктора). В конце программы необходимо вывести в консоль инфомацию возвращаему методом getCountOperation().
10*. Создать CalculatorWithMemory, принципы как и в задании 9, сможете)?. Данный калькулятор работает как настоящий калькулятор с функцией памяти. Функция памяти работает через два метода, записать в память результат выполнения последнего вызванного метода, получить из памяти записанное значение. При получении записи из памяти память стирается, при записи нового значения память перезаписывается. 
11*. Большое выражение из 2 задания разделить на мелкие выражения в отдельных сроках выполнить данные выражения получая из памяти прошлый результат и записывая новый.
12**. Написать класс CalculatorStringExpression реализующий разбор (парсинг) СТРОКИ с математическим выражением:
	12.1 Класс должен понимать операторы: + - \ * ^ || 
	12.2 Класс должен понимать ( )
	12.3 Класс должен строго учитывать приоритеты в данном выражении
	12.4 Класс должен уметь парсить в строке константные значение: PI, E (Экспонента)
	12.6 Класс должен контролировать что в строке могут быть только допустие символы (числа, операторы, скобки, константы)
	12.7 Класс должен контролировать чтобы выражение было валидным (2 + 2 - хорошо, 2 + - плохо)